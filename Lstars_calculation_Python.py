"""
This is a Python script to compute Lstars for Cluster data with 1-min resolution.



The result product is available through Cluster science archive ('LSTAR' product).
When using the 'LSTAR' product please add the DOI for this code to references.



For computations, one needs the information from FGM files taken from Cluster science
archive and Kp index from OMNI data (with 1-hour resolution).

To run the code, it is necessary to have IRBEM library installed on the computer.

Generated by A.G. Smirnov, E.A. Kronberg, P.W. Daly, N.A. Aseev, Y.Y. Shprits and A. Kellerman.

In case of any questions, contact Artem Smirnov via arsmirnov95@gmail.com.

"""
import sys
#now append the path to Python folder inside IRBEM:
#sys.path.append('... path to IRBEM .../IRBEM/Python')

from spacepy import coordinates as coord
from spacepy.time import Ticktock
import numpy as np
import datetime as dt
import spacepy
import spacepy.time as spt
import spacepy.pycdf as pycdf
from IRBEM import MagFields

months=[1,2,3,4,5,6,7,8,9,10,11,12]

cluster_num = 4 # Cluster-1,2,3, or 4
# read they yearly cdf file downloaded from the archive:
cdf=pycdf.CDF("C{}_CP_FGM_SPIN__{}0101_000000_{}1231_235959.cdf".format(cluster_num, year, year))
fgm_position=cdf["sc_pos_xyz_gse__C{}_CP_FGM_SPIN".format(cluster_num)][...]
fgm_position=fgm_position/6371.2 # convert to R_E
B_measured=cdf["B_mag__C{}_CP_FGM_SPIN".format(cluster_num)][...]
times=cdf["time_tags__C{}_CP_FGM_SPIN".format(cluster_num)][...]
time_rdt=spt.Ticktock(times,'UTC').RDT # convert time to decimal format. We note
# that it differs from MATLAB date by 366 days.

text=np.loadtxt("./{}_kp.dat".format(year)) # path to hourly Kp-index values from OMNIWeb data.
kp_hour=text[:,3]

# Now initialize variables and check number of days in a month
resid=year/4
if resid!=0:
    dmax=np.array([[31,28,31,30,31,30,31, 31, 30, 31, 30, 31]]).T
    num_h=365*24
    Kp_min=np.zeros(525600)
    fgm_gse_coords=np.zeros((525600,3))
else:
    dmax=([[31,29,31,30,31,30,31, 31, 30, 31, 30, 31]]).T
    num_h=366*24
    Kp_min=np.zeros(527040)
    fgm_gse_coords=np.zeros((527040,3))

for i in range(num_h):
    Kp_min[i*60:(i+1)*60]=kp_hour[i]*np.ones(60)


print('DONE importing data')
n=0

for m in months:
    l=0
    month=m-1
    lstars=np.zeros(dmax[month]*24*60)
    
    D1=spt.Ticktock(dt.datetime(year, m, 1, 0,0,0),'UTC').RDT
    D2=spt.Ticktock(dt.datetime(year, m, dmax[month], 23,59,59,999999),'UTC').RDT
    magn_field_position_mns=[]
    
    mask_fgm_mns=((time_rdt>D1)&(time_rdt<D2))
    magn_field_position_mns=fgm_position[mask_fgm_mns]
    fgm_time_rdt_mns=time_rdt[mask_fgm_mns]
    
    
    for day in range(dmax[month]):
        print year, m, day
        for hour in range(24):
            for minute in range(60):
                            
                time_start = spt.Ticktock(dt.datetime(year, m, day+1, hour, minute, 0),'UTC').RDT
                time_end   = spt.Ticktock(dt.datetime(year, m, day+1, hour, minute, 59, 9999),'UTC').RDT

                mask=((fgm_time_rdt_mns>time_start)&(fgm_time_rdt_mns<time_end))
                fgm_posit=magn_field_position_mns[mask]
                gse=(np.nanmean(fgm_posit, axis=0)).T
                fgm_gse_coords[n, 0:3]=gse
                average_time=dt.datetime(year, m, day+1, hour, minute, 30)
                time_for_save[n]=spt.Ticktock(average_time).ISO

                model= MagFields(options=[1,0,0,0,0], sysaxes=3, verbose=True)
                LLA={}
                LLA['x1']=gse[0]
                LLA['x2']=gse[1]
                LLA['x3']=gse[2]
                LLA['dateTime']=average_time
                maginput={'Kp': Kp_min[n]}
                params=model.make_lstar(LLA, maginput)
                lstars[l]=params['Lstar'][0]

                n+=1
                l+=1
    # at this point, one might save lstars array to the customary location e.g. using:
    # np.save('... path to file ...', lstars)

# Thus, one gets monthly arrays of Lstars with 1-minute resolution.